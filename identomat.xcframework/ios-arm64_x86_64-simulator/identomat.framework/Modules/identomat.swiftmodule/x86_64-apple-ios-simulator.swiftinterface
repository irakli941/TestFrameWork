// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name identomat
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import CloudKit
import Combine
import CommonCrypto
import CoreImage
import CoreNFC
import Dispatch
import Foundation
import MobileCoreServices
import Network
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
@_exported import identomat
import Accelerate.vImage
import zlib
public enum SpitfireError : Swift.Error {
  case imageArrayEmpty
  case invalidFramerate(Swift.String)
  case imageDimensionsMatchFailure
  case imageDimensionsMultiplierFailure(Swift.String)
  case videoWriterFailure
  case pixelBufferPointeeFailure
  case invalidStatusCode(Swift.Int)
  case pixelBufferApendFailure
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: identomat.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: identomat.Request, for session: identomat.Session, dueTo error: Swift.Error, completion: @escaping (identomat.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : identomat.RequestAdapter, identomat.RequestRetrier {
}
extension identomat.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: identomat.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: identomat.Request, for session: identomat.Session, dueTo error: Swift.Error, completion: @escaping (identomat.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, identomat.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (identomat.Request, identomat.Session, Swift.Error, _ completion: @escaping (identomat.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : identomat.RequestInterceptor {
  public init(_ adaptHandler: @escaping identomat.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: identomat.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
open class Retrier : identomat.RequestInterceptor {
  public init(_ retryHandler: @escaping identomat.RetryHandler)
  open func retry(_ request: identomat.Request, for session: identomat.Session, dueTo error: Swift.Error, completion: @escaping (identomat.RetryResult) -> Swift.Void)
  @objc deinit
}
open class Interceptor : identomat.RequestInterceptor {
  final public let adapters: [identomat.RequestAdapter]
  final public let retriers: [identomat.RequestRetrier]
  public init(adaptHandler: @escaping identomat.AdaptHandler, retryHandler: @escaping identomat.RetryHandler)
  public init(adapter: identomat.RequestAdapter, retrier: identomat.RequestRetrier)
  public init(adapters: [identomat.RequestAdapter] = [], retriers: [identomat.RequestRetrier] = [], interceptors: [identomat.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: identomat.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: identomat.Request, for session: identomat.Session, dueTo error: Swift.Error, completion: @escaping (identomat.RetryResult) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: identomat.Request.State, b: identomat.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: identomat.EventMonitor?
  final public let interceptor: identomat.RequestInterceptor?
  weak public var delegate: identomat.RequestDelegate? {
    get
  }
  public var state: identomat.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: identomat.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: identomat.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: identomat.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping identomat.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping identomat.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: identomat.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: identomat.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension identomat.Request : Swift.Equatable {
  public static func == (lhs: identomat.Request, rhs: identomat.Request) -> Swift.Bool
}
extension identomat.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension identomat.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension identomat.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: identomat.Request)
  func retryResult(for request: identomat.Request, dueTo error: identomat.AFError, completion: @escaping (identomat.RetryResult) -> Swift.Void)
  func retryRequest(_ request: identomat.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : identomat.Request {
  final public let convertible: identomat.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping identomat.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : identomat.Request {
  public typealias Handler<Success, Failure> = (identomat.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: identomat.DataStreamRequest.Event<Success, Failure>
    public let token: identomat.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(identomat.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: identomat.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: identomat.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping identomat.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension identomat.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: identomat.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : identomat.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: identomat.DownloadRequest.Options
    public static let removePreviousFile: identomat.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = identomat.DownloadRequest.Options
    public typealias Element = identomat.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: identomat.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: identomat.DownloadRequest.Options = []) -> identomat.DownloadRequest.Destination
  public enum Downloadable {
    case request(identomat.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: identomat.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping identomat.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : identomat.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: identomat.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: identomat.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> identomat.UploadRequest.Uploadable
}
extension identomat.UploadRequest.Uploadable : identomat.UploadableConvertible {
  public func createUploadable() throws -> identomat.UploadRequest.Uploadable
}
public protocol UploadConvertible : identomat.URLRequestConvertible, identomat.UploadableConvertible {
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: identomat.FoundationTransportError, b: identomat.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, identomat.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: identomat.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: identomat.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
public typealias AFResult<Success> = Swift.Result<Success, identomat.AFError>
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: identomat.Redirector
  public static let doNotFollow: identomat.Redirector
  public let behavior: identomat.Redirector.Behavior
  public init(behavior: identomat.Redirector.Behavior)
}
extension identomat.Redirector : identomat.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: identomat.FoundationSecurityError, b: identomat.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension identomat.FoundationSecurity : identomat.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((identomat.PinningState) -> ()))
}
extension identomat.FoundationSecurity : identomat.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: identomat.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: identomat.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: identomat.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: identomat.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> identomat.URLParts?
}
public typealias AFDataResponse<Success> = identomat.DataResponse<Success, identomat.AFError>
public typealias AFDownloadResponse<Success> = identomat.DownloadResponse<Success, identomat.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension identomat.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension identomat.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> identomat.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> identomat.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> identomat.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> identomat.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension identomat.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension identomat.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> identomat.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> identomat.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> identomat.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> identomat.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
extension Foundation.URLRequest {
  public var method: identomat.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
public let AF: identomat.Session
open class Session {
  public static let `default`: identomat.Session
  final public let session: Foundation.URLSession
  final public let delegate: identomat.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: identomat.RequestInterceptor?
  final public let serverTrustManager: identomat.ServerTrustManager?
  final public let redirectHandler: identomat.RedirectHandler?
  final public let cachedResponseHandler: identomat.CachedResponseHandler?
  final public let eventMonitor: identomat.CompositeEventMonitor
  final public let defaultEventMonitors: [identomat.EventMonitor]
  public init(session: Foundation.URLSession, delegate: identomat.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: identomat.RequestInterceptor? = nil, serverTrustManager: identomat.ServerTrustManager? = nil, redirectHandler: identomat.RedirectHandler? = nil, cachedResponseHandler: identomat.CachedResponseHandler? = nil, eventMonitors: [identomat.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: identomat.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: identomat.RequestInterceptor? = nil, serverTrustManager: identomat.ServerTrustManager? = nil, redirectHandler: identomat.RedirectHandler? = nil, cachedResponseHandler: identomat.CachedResponseHandler? = nil, eventMonitors: [identomat.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<identomat.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .get, parameters: identomat.Parameters? = nil, encoding: identomat.ParameterEncoding = URLEncoding.default, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.DataRequest
  open func request<Parameters>(_ convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .get, parameters: Parameters? = nil, encoder: identomat.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: identomat.URLRequestConvertible, interceptor: identomat.RequestInterceptor? = nil) -> identomat.DataRequest
  open func streamRequest<Parameters>(_ convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .get, parameters: Parameters? = nil, encoder: identomat.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: identomat.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: identomat.RequestInterceptor? = nil, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .get, headers: identomat.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: identomat.RequestInterceptor? = nil, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.DataStreamRequest
  open func streamRequest(_ convertible: identomat.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: identomat.RequestInterceptor? = nil) -> identomat.DataStreamRequest
  open func download(_ convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .get, parameters: identomat.Parameters? = nil, encoding: identomat.ParameterEncoding = URLEncoding.default, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, requestModifier: identomat.Session.RequestModifier? = nil, to destination: identomat.DownloadRequest.Destination? = nil) -> identomat.DownloadRequest
  open func download<Parameters>(_ convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .get, parameters: Parameters? = nil, encoder: identomat.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, requestModifier: identomat.Session.RequestModifier? = nil, to destination: identomat.DownloadRequest.Destination? = nil) -> identomat.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: identomat.URLRequestConvertible, interceptor: identomat.RequestInterceptor? = nil, to destination: identomat.DownloadRequest.Destination? = nil) -> identomat.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: identomat.RequestInterceptor? = nil, to destination: identomat.DownloadRequest.Destination? = nil) -> identomat.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .post, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: identomat.URLRequestConvertible, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> identomat.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .post, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: identomat.URLRequestConvertible, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> identomat.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: identomat.URLConvertible, method: identomat.HTTPMethod = .post, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: identomat.URLRequestConvertible, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> identomat.UploadRequest
  open func upload(multipartFormData: @escaping (identomat.MultipartFormData) -> Swift.Void, to url: identomat.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: identomat.HTTPMethod = .post, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.UploadRequest
  open func upload(multipartFormData: @escaping (identomat.MultipartFormData) -> Swift.Void, with request: identomat.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> identomat.UploadRequest
  open func upload(multipartFormData: identomat.MultipartFormData, to url: identomat.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: identomat.HTTPMethod = .post, headers: identomat.HTTPHeaders? = nil, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: identomat.Session.RequestModifier? = nil) -> identomat.UploadRequest
  open func upload(multipartFormData: identomat.MultipartFormData, with request: identomat.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: identomat.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> identomat.UploadRequest
}
extension identomat.Session : identomat.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: identomat.Request)
  public func retryResult(for request: identomat.Request, dueTo error: identomat.AFError, completion: @escaping (identomat.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: identomat.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: identomat.ErrorType, b: identomat.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: identomat.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: identomat.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension identomat.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: identomat.WebSocketEvent, client: identomat.WebSocket)
}
open class WebSocket : identomat.WebSocketClient, identomat.EngineDelegate {
  weak public var delegate: identomat.WebSocketDelegate?
  public var onEvent: ((identomat.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: identomat.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: identomat.CertificatePinning? = FoundationSecurity(), compressionHandler: identomat.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: identomat.WebSocketEvent)
  @objc deinit
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: identomat.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: identomat.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: identomat.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: identomat.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
extension Foundation.URLSessionConfiguration : identomat.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension identomat.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, identomat.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: identomat.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: identomat.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : identomat.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: identomat.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: identomat.AuthenticationError, b: identomat.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : identomat.RequestInterceptor where AuthenticatorType : identomat.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: identomat.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: identomat.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: identomat.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: identomat.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: identomat.Request, for session: identomat.Session, dueTo error: Swift.Error, completion: @escaping (identomat.RetryResult) -> Swift.Void)
  @objc deinit
}
public class WSEngine : identomat.Engine, identomat.TransportEventClient, identomat.FramerEventClient, identomat.FrameCollectorDelegate, identomat.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: identomat.Transport, certPinner: identomat.CertificatePinning? = nil, headerValidator: identomat.HeaderValidator = FoundationSecurity(), httpHandler: identomat.HTTPHandler = FoundationHTTPHandler(), framer: identomat.Framer = WSFramer(), compressionHandler: identomat.CompressionHandler? = nil)
  public func register(delegate: identomat.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: identomat.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: identomat.ConnectionState)
  public func didReceiveHTTP(event: identomat.HTTPEvent)
  public func frameProcessed(event: identomat.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: identomat.FrameCollector.Event)
  @objc deinit
}
extension identomat.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension identomat.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> identomat.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension identomat.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> identomat.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension identomat.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> identomat.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: identomat.TCPTransportError, b: identomat.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : identomat.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: identomat.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: identomat.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: identomat.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: identomat.Request, didFailToCreateURLRequestWithError error: identomat.AFError)
  func request(_ request: identomat.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: identomat.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: identomat.AFError)
  func request(_ request: identomat.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: identomat.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: identomat.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: identomat.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: identomat.AFError)
  func request(_ request: identomat.Request, didCompleteTask task: Foundation.URLSessionTask, with error: identomat.AFError?)
  func requestIsRetrying(_ request: identomat.Request)
  func requestDidFinish(_ request: identomat.Request)
  func requestDidResume(_ request: identomat.Request)
  func request(_ request: identomat.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: identomat.Request)
  func request(_ request: identomat.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: identomat.Request)
  func request(_ request: identomat.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: identomat.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: identomat.Request.ValidationResult)
  func request(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Foundation.Data?, identomat.AFError>)
  func request<Value>(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Value, identomat.AFError>)
  func request(_ request: identomat.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: identomat.Request.ValidationResult)
  func request<Value>(_ request: identomat.DataStreamRequest, didParseStream result: Swift.Result<Value, identomat.AFError>)
  func request(_ request: identomat.UploadRequest, didCreateUploadable uploadable: identomat.UploadRequest.Uploadable)
  func request(_ request: identomat.UploadRequest, didFailToCreateUploadableWithError error: identomat.AFError)
  func request(_ request: identomat.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: identomat.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, identomat.AFError>)
  func request(_ request: identomat.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: identomat.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: identomat.Request.ValidationResult)
  func request(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Foundation.URL?, identomat.AFError>)
  func request<Value>(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Value, identomat.AFError>)
}
extension identomat.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: identomat.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: identomat.Request, didFailToCreateURLRequestWithError error: identomat.AFError)
  public func request(_ request: identomat.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: identomat.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: identomat.AFError)
  public func request(_ request: identomat.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: identomat.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: identomat.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: identomat.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: identomat.AFError)
  public func request(_ request: identomat.Request, didCompleteTask task: Foundation.URLSessionTask, with error: identomat.AFError?)
  public func requestIsRetrying(_ request: identomat.Request)
  public func requestDidFinish(_ request: identomat.Request)
  public func requestDidResume(_ request: identomat.Request)
  public func request(_ request: identomat.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: identomat.Request)
  public func request(_ request: identomat.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: identomat.Request)
  public func request(_ request: identomat.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: identomat.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: identomat.Request.ValidationResult)
  public func request(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Foundation.Data?, identomat.AFError>)
  public func request<Value>(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Value, identomat.AFError>)
  public func request(_ request: identomat.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: identomat.Request.ValidationResult)
  public func request<Value>(_ request: identomat.DataStreamRequest, didParseStream result: Swift.Result<Value, identomat.AFError>)
  public func request(_ request: identomat.UploadRequest, didCreateUploadable uploadable: identomat.UploadRequest.Uploadable)
  public func request(_ request: identomat.UploadRequest, didFailToCreateUploadableWithError error: identomat.AFError)
  public func request(_ request: identomat.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: identomat.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, identomat.AFError>)
  public func request(_ request: identomat.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: identomat.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: identomat.Request.ValidationResult)
  public func request(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Foundation.URL?, identomat.AFError>)
  public func request<Value>(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Value, identomat.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : identomat.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: identomat.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: identomat.Request, didFailToCreateURLRequestWithError error: identomat.AFError)
  final public func request(_ request: identomat.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: identomat.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: identomat.AFError)
  final public func request(_ request: identomat.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: identomat.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: identomat.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: identomat.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: identomat.AFError)
  final public func request(_ request: identomat.Request, didCompleteTask task: Foundation.URLSessionTask, with error: identomat.AFError?)
  final public func requestIsRetrying(_ request: identomat.Request)
  final public func requestDidFinish(_ request: identomat.Request)
  final public func requestDidResume(_ request: identomat.Request)
  final public func request(_ request: identomat.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: identomat.Request)
  final public func request(_ request: identomat.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: identomat.Request)
  final public func request(_ request: identomat.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: identomat.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: identomat.Request.ValidationResult)
  final public func request(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Foundation.Data?, identomat.AFError>)
  final public func request<Value>(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Value, identomat.AFError>)
  final public func request(_ request: identomat.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: identomat.Request.ValidationResult)
  final public func request<Value>(_ request: identomat.DataStreamRequest, didParseStream result: Swift.Result<Value, identomat.AFError>)
  final public func request(_ request: identomat.UploadRequest, didCreateUploadable uploadable: identomat.UploadRequest.Uploadable)
  final public func request(_ request: identomat.UploadRequest, didFailToCreateUploadableWithError error: identomat.AFError)
  final public func request(_ request: identomat.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: identomat.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, identomat.AFError>)
  final public func request(_ request: identomat.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: identomat.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: identomat.Request.ValidationResult)
  final public func request(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Foundation.URL?, identomat.AFError>)
  final public func request<Value>(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Value, identomat.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : identomat.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((identomat.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((identomat.Request, identomat.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((identomat.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((identomat.Request, Foundation.URLRequest, identomat.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((identomat.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((identomat.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((identomat.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((identomat.Request, Foundation.URLSessionTask, identomat.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((identomat.Request, Foundation.URLSessionTask, identomat.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((identomat.Request) -> Swift.Void)?
  open var requestDidFinish: ((identomat.Request) -> Swift.Void)?
  open var requestDidResume: ((identomat.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((identomat.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((identomat.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((identomat.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((identomat.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((identomat.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((identomat.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, identomat.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((identomat.DataRequest, identomat.DataResponse<Foundation.Data?, identomat.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((identomat.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, identomat.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((identomat.UploadRequest, identomat.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((identomat.UploadRequest, identomat.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((identomat.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((identomat.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, identomat.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((identomat.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((identomat.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, identomat.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((identomat.DownloadRequest, identomat.DownloadResponse<Foundation.URL?, identomat.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: identomat.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: identomat.Request, didFailToCreateURLRequestWithError error: identomat.AFError)
  open func request(_ request: identomat.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: identomat.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: identomat.AFError)
  open func request(_ request: identomat.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: identomat.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: identomat.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: identomat.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: identomat.AFError)
  open func request(_ request: identomat.Request, didCompleteTask task: Foundation.URLSessionTask, with error: identomat.AFError?)
  open func requestIsRetrying(_ request: identomat.Request)
  open func requestDidFinish(_ request: identomat.Request)
  open func requestDidResume(_ request: identomat.Request)
  public func request(_ request: identomat.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: identomat.Request)
  public func request(_ request: identomat.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: identomat.Request)
  public func request(_ request: identomat.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: identomat.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: identomat.Request.ValidationResult)
  open func request(_ request: identomat.DataRequest, didParseResponse response: identomat.DataResponse<Foundation.Data?, identomat.AFError>)
  public func request(_ request: identomat.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: identomat.Request.ValidationResult)
  open func request(_ request: identomat.UploadRequest, didCreateUploadable uploadable: identomat.UploadRequest.Uploadable)
  open func request(_ request: identomat.UploadRequest, didFailToCreateUploadableWithError error: identomat.AFError)
  open func request(_ request: identomat.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: identomat.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, identomat.AFError>)
  open func request(_ request: identomat.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: identomat.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: identomat.Request.ValidationResult)
  open func request(_ request: identomat.DownloadRequest, didParseResponse response: identomat.DownloadResponse<Foundation.URL?, identomat.AFError>)
  @objc deinit
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : identomat.ParameterEncoder {
  public static var `default`: identomat.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: identomat.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: identomat.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
open class URLEncodedFormParameterEncoder : identomat.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: identomat.URLEncodedFormParameterEncoder.Destination, b: identomat.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: identomat.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: identomat.URLEncodedFormEncoder
  final public let destination: identomat.URLEncodedFormParameterEncoder.Destination
  public init(encoder: identomat.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: identomat.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
public class WSCompression : identomat.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: identomat.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: identomat.ServerEvent)
}
public enum ServerEvent {
  case connected(identomat.Connection, [Swift.String : Swift.String])
  case disconnected(identomat.Connection, Swift.String, Swift.UInt16)
  case text(identomat.Connection, Swift.String)
  case binary(identomat.Connection, Foundation.Data)
  case pong(identomat.Connection, Foundation.Data?)
  case ping(identomat.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((identomat.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : identomat.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : identomat.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> identomat.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : identomat.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : identomat.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: identomat.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: identomat.RevocationTrustEvaluator.Options
    public static let ocsp: identomat.RevocationTrustEvaluator.Options
    public static let preferCRL: identomat.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: identomat.RevocationTrustEvaluator.Options
    public static let any: identomat.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = identomat.RevocationTrustEvaluator.Options
    public typealias Element = identomat.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: identomat.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PinnedCertificatesTrustEvaluator : identomat.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PublicKeysTrustEvaluator : identomat.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class CompositeTrustEvaluator : identomat.ServerTrustEvaluating {
  public init(evaluators: [identomat.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = identomat.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : identomat.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == identomat.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : identomat.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension identomat.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : identomat.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension identomat.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : identomat.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension identomat.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: identomat.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : identomat.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension identomat.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : identomat.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension identomat.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : identomat.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension identomat.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : identomat.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension identomat.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : identomat.DataResponseSerializerProtocol, identomat.DownloadResponseSerializerProtocol {
  var dataPreprocessor: identomat.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<identomat.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : identomat.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : identomat.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension identomat.ResponseSerializer {
  public static var defaultDataPreprocessor: identomat.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<identomat.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: identomat.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<identomat.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension identomat.DownloadResponseSerializerProtocol where Self : identomat.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension identomat.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (identomat.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (identomat.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : identomat.DataResponseSerializerProtocol
}
extension identomat.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (identomat.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (identomat.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : identomat.DownloadResponseSerializerProtocol
}
public struct URLResponseSerializer : identomat.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension identomat.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (identomat.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : identomat.ResponseSerializer {
  final public let dataPreprocessor: identomat.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<identomat.HTTPMethod>
  public init(dataPreprocessor: identomat.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension identomat.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (identomat.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension identomat.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (identomat.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : identomat.ResponseSerializer {
  final public let dataPreprocessor: identomat.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<identomat.HTTPMethod>
  public init(dataPreprocessor: identomat.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension identomat.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (identomat.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension identomat.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (identomat.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
final public class JSONResponseSerializer : identomat.ResponseSerializer {
  final public let dataPreprocessor: identomat.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<identomat.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: identomat.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension identomat.DataRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (identomat.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension identomat.DownloadRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (identomat.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: identomat.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension identomat.Empty : identomat.EmptyResponse {
  public static func emptyValue() -> identomat.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : identomat.DataDecoder {
}
extension Foundation.PropertyListDecoder : identomat.DataDecoder {
}
final public class DecodableResponseSerializer<T> : identomat.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: identomat.DataPreprocessor
  final public let decoder: identomat.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<identomat.HTTPMethod>
  public init(dataPreprocessor: identomat.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: identomat.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension identomat.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: identomat.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (identomat.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension identomat.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: identomat.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: identomat.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (identomat.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : identomat.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: identomat.DataDecoder
  public let dataPreprocessor: identomat.DataPreprocessor
  public init(decoder: identomat.DataDecoder = JSONDecoder(), dataPreprocessor: identomat.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : identomat.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : identomat.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension identomat.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping identomat.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping identomat.DataStreamRequest.Handler<Serializer.SerializedObject, identomat.AFError>) -> Self where Serializer : identomat.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping identomat.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: identomat.DataDecoder = JSONDecoder(), preprocessor: identomat.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping identomat.DataStreamRequest.Handler<T, identomat.AFError>) -> Self where T : Swift.Decodable
}
public class FoundationHTTPHandler : identomat.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: identomat.HTTPHandlerDelegate)
  @objc deinit
}
public protocol SpitfireDelegate : AnyObject {
  func videoProgress(progress: Foundation.Progress)
  func videoCompleted(url: Foundation.URL)
  func videoFailed(error: identomat.SpitfireError)
}
public class Spitfire {
  public init(delegate: identomat.SpitfireDelegate)
  public func makeVideo(with images: [UIKit.UIImage], fps: Swift.Int32 = 30)
  @objc deinit
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: identomat.HTTPMethod
  public static let delete: identomat.HTTPMethod
  public static let get: identomat.HTTPMethod
  public static let head: identomat.HTTPMethod
  public static let options: identomat.HTTPMethod
  public static let patch: identomat.HTTPMethod
  public static let post: identomat.HTTPMethod
  public static let put: identomat.HTTPMethod
  public static let trace: identomat.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NavigationView : UIKit.UIView {
  @objc deinit
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = identomat.DataResponse<Value, identomat.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: identomat.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : identomat.ResponseSerializer
  public init<Serializer>(_ request: identomat.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : identomat.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, identomat.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, identomat.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == identomat.DataResponse<Value, identomat.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension identomat.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: identomat.DataRequest, queue: Dispatch.DispatchQueue)
}
extension identomat.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> identomat.DataResponsePublisher<T> where Serializer : identomat.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: identomat.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> identomat.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: identomat.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> identomat.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: identomat.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: identomat.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<identomat.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> identomat.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> identomat.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = identomat.DataStreamRequest.Stream<Value, identomat.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: identomat.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : identomat.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, identomat.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, identomat.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == identomat.DataStreamRequest.Stream<Value, identomat.AFError>
}
extension identomat.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> identomat.DataStreamPublisher<Serializer.SerializedObject> where Serializer : identomat.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> identomat.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> identomat.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: identomat.DataDecoder = JSONDecoder(), preprocessor: identomat.DataPreprocessor = PassthroughPreprocessor()) -> identomat.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = identomat.DownloadResponse<Value, identomat.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: identomat.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : identomat.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: identomat.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : identomat.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, identomat.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, identomat.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == identomat.DownloadResponse<Value, identomat.AFError>
}
extension identomat.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> identomat.DownloadResponsePublisher<T> where Serializer : identomat.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> identomat.DownloadResponsePublisher<T> where Serializer : identomat.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> identomat.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: identomat.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> identomat.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: identomat.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<identomat.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> identomat.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: identomat.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: identomat.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<identomat.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> identomat.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension identomat.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: identomat.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension identomat.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> identomat.DownloadResponsePublisher<Foundation.URL?>
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: identomat.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: identomat.Frame)
  @objc deinit
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: identomat.URLEncodedFormEncoder.ArrayEncoding, b: identomat.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: identomat.URLEncodedFormEncoder.BoolEncoding, b: identomat.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: identomat.URLEncodedFormEncoder.SpaceEncoding, b: identomat.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: identomat.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: identomat.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: identomat.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: identomat.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: identomat.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: identomat.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: identomat.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: identomat.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: identomat.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: identomat.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: identomat.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: identomat.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: identomat.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: identomat.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: identomat.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
@objc @_inheritsConvenienceInitializers public class IdentomatManager : ObjectiveC.NSObject {
  public static func getInstance() -> identomat.IdentomatManager
  public func setUp(token: Swift.String)
  public func setBaseUrl(url: Swift.String)
  public func setColors(color: [Swift.String : Swift.String])
  public func setStringsTableName(tableName: Swift.String)
  public func setStrings(dict: [Swift.String : Any?])
  public func hideStatusBar(_ bool: Swift.Bool)
  public func setStatusBarStyle(style: UIKit.UIStatusBarStyle)
  public func setLogo(view: UIKit.UIView)
  public func setVariables(variables: [Swift.String : Any?])
  @available(*, deprecated, message: "pass UIImage? in setVariables() function with 'liveness_neutral_icon' and 'liveness_smile_icon' keys")
  public func setLivenessIcons(neutralFace: UIKit.UIImage?, smileFace: UIKit.UIImage?)
  @available(*, deprecated, message: "pass UIImage? in setVariables() function with 'liveness_retry_icon' and 'liveness_retry_icon_size' keys")
  public func setLivenessRetryIcon(retryIcon: UIKit.UIImage?, size: Swift.Int? = nil)
  @available(*, deprecated, message: "pass UIImage? in setVariables() function with 'scan_retry_icon' and 'scan_retry_icon_size' keys")
  public func setRetryIcon(retryIcon: UIKit.UIImage?, size: Swift.Int? = nil)
  @available(*, deprecated, message: "pass UIImage? in setVariables() function with 'camera_deny_icon' and 'camera_deny_icon_size' keys")
  public func setCameraDenyIcon(cameraDenyIcon: UIKit.UIImage?, size: Swift.Int? = nil)
  @available(*, deprecated, message: "pass Int? in setVariables() function with 'button_corner_radius' key")
  public func setButtonCornerRadious(radius: Swift.Int)
  @available(*, deprecated, message: "pass Int? in setVariables() function with 'panel_elevation' key")
  public func setPanelElevation(elevation: Swift.Int)
  @available(*, deprecated, message: "pass String? in setVariables() function with 'title_font' key and Int for 'title_font_size'")
  public func setTitleFont(fontname: Swift.String, size: Swift.Int = 20)
  @available(*, deprecated, message: "pass String? in setVariables() function with 'head1_font' key and Int for 'head1_font_size'")
  public func setHead1Font(fontname: Swift.String, size: Swift.Int = 20)
  @available(*, deprecated, message: "pass String? in setVariables() function with 'head2_font' key and Int for 'head2_font_size'")
  public func setHead2Font(fontname: Swift.String, size: Swift.Int = 15)
  @available(*, deprecated, message: "pass String? in setVariables() function with 'body_font' key and Int for 'body_font_size'")
  public func setBodyFont(fontname: Swift.String, size: Swift.Int = 13)
  @available(*, deprecated, message: "pass Boolean in setVariables() function with 'skip_liveness_instructions' key")
  public func skipLivenessInstructions(_ bool: Swift.Bool)
  @available(*, deprecated, message: "pass Int in setVariables() function with 'liveness_type' key")
  public func setLivenessType(livenessType: Swift.Int = 1)
  public func callBack(callback: (() -> Swift.Void)?)
  public func backButtonCallBack(callback: (() -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
extension identomat.IdentomatManager {
  public func getIdentomatView() -> UIKit.UINavigationController
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(identomat.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: identomat.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: identomat.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: identomat.AFError.ServerTrustFailureReason.Output, options: identomat.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: identomat.URLConvertible)
  case multipartEncodingFailed(reason: identomat.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: identomat.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: identomat.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: identomat.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: identomat.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: identomat.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: identomat.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: identomat.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> identomat.AFError
}
extension identomat.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension identomat.AFError {
  public var urlConvertible: identomat.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
}
extension identomat.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: identomat.URLRequestConvertible, with parameters: identomat.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : identomat.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: identomat.URLEncoding.Destination, b: identomat.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: identomat.URLEncoding.ArrayEncoding, b: identomat.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: identomat.URLEncoding.BoolEncoding, b: identomat.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: identomat.URLEncoding {
    get
  }
  public static var queryString: identomat.URLEncoding {
    get
  }
  public static var httpBody: identomat.URLEncoding {
    get
  }
  public let destination: identomat.URLEncoding.Destination
  public let arrayEncoding: identomat.URLEncoding.ArrayEncoding
  public let boolEncoding: identomat.URLEncoding.BoolEncoding
  public init(destination: identomat.URLEncoding.Destination = .methodDependent, arrayEncoding: identomat.URLEncoding.ArrayEncoding = .brackets, boolEncoding: identomat.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: identomat.URLRequestConvertible, with parameters: identomat.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : identomat.ParameterEncoding {
  public static var `default`: identomat.JSONEncoding {
    get
  }
  public static var prettyPrinted: identomat.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: identomat.URLRequestConvertible, with parameters: identomat.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: identomat.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : identomat.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : identomat.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : identomat.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension identomat.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : identomat.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: identomat.URLConvertible, method: identomat.HTTPMethod, headers: identomat.HTTPHeaders? = nil) throws
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(identomat.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: identomat.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: identomat.FramerEventClient)
  func createWriteFrame(opcode: identomat.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : identomat.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: identomat.FramerEventClient)
  public func createWriteFrame(opcode: identomat.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : identomat.MyWSArrayType {
}
extension Swift.Array where Element : Swift.UnsignedInteger, Element : identomat.MyWSArrayType {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public struct HTTPHeaders {
  public init()
  public init(_ headers: [identomat.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: identomat.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: identomat.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> identomat.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension identomat.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension identomat.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: identomat.HTTPHeader...)
  public typealias ArrayLiteralElement = identomat.HTTPHeader
}
extension identomat.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[identomat.HTTPHeader]>
}
extension identomat.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> identomat.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = identomat.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<identomat.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[identomat.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<identomat.HTTPHeaders>
}
extension identomat.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: identomat.HTTPHeader, b: identomat.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension identomat.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension identomat.HTTPHeader {
  public static func accept(_ value: Swift.String) -> identomat.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> identomat.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> identomat.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> identomat.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> identomat.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> identomat.HTTPHeader
  public static func authorization(_ value: Swift.String) -> identomat.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> identomat.HTTPHeader
  public static func contentType(_ value: Swift.String) -> identomat.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> identomat.HTTPHeader
}
extension identomat.HTTPHeaders {
  public static let `default`: identomat.HTTPHeaders
}
extension identomat.HTTPHeader {
  public static let defaultAcceptEncoding: identomat.HTTPHeader
  public static let defaultAcceptLanguage: identomat.HTTPHeader
  public static let defaultUserAgent: identomat.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: identomat.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: identomat.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: identomat.HTTPHeaders {
    get
    set
  }
}
public class StringHTTPHandler : identomat.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: identomat.HTTPHandlerDelegate)
  @objc deinit
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: identomat.ResponseCacher
  public static let doNotCache: identomat.ResponseCacher
  public let behavior: identomat.ResponseCacher.Behavior
  public init(behavior: identomat.ResponseCacher.Behavior)
}
extension identomat.ResponseCacher : identomat.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(identomat.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: identomat.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: identomat.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (identomat.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: identomat.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: identomat.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping identomat.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension identomat.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: identomat.NetworkReachabilityManager.NetworkReachabilityStatus, b: identomat.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
open class RetryPolicy : identomat.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<identomat.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<identomat.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<identomat.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: identomat.Request, for session: identomat.Session, dueTo error: Swift.Error, completion: @escaping (identomat.RetryResult) -> Swift.Void)
  open func shouldRetry(request: identomat.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
open class ConnectionLostRetryPolicy : identomat.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<identomat.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
extension identomat.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: identomat.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : identomat.EventMonitor {
  final public func requestDidResume(_ request: identomat.Request)
  final public func requestDidSuspend(_ request: identomat.Request)
  final public func requestDidCancel(_ request: identomat.Request)
  final public func requestDidFinish(_ request: identomat.Request)
  final public func request(_ request: identomat.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: identomat.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: identomat.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: identomat.Request, didCompleteTask task: Foundation.URLSessionTask, with error: identomat.AFError?)
  @objc deinit
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: identomat.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: identomat.AlamofireExtension<Self.ExtendedType> { get set }
}
extension identomat.AlamofireExtended {
  public static var af: identomat.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: identomat.AlamofireExtension<Self> {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : identomat.HTTPServerHandler {
  public func register(delegate: identomat.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension identomat.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension identomat.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension identomat.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension identomat.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : identomat.Server, identomat.ConnectionDelegate {
  public var onEvent: ((identomat.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: identomat.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : identomat.Connection, identomat.HTTPServerDelegate, identomat.FramerEventClient, identomat.FrameCollectorDelegate, identomat.TransportEventClient {
  public var onEvent: ((identomat.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: identomat.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: identomat.FrameOpCode)
  public func connectionChanged(state: identomat.ConnectionState)
  public func didReceive(event: identomat.HTTPEvent)
  public func frameProcessed(event: identomat.FrameEvent)
  public func didForm(event: identomat.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
extension identomat.Request.State : Swift.Equatable {}
extension identomat.Request.State : Swift.Hashable {}
extension identomat.FoundationTransportError : Swift.Equatable {}
extension identomat.FoundationTransportError : Swift.Hashable {}
extension identomat.FoundationSecurityError : Swift.Equatable {}
extension identomat.FoundationSecurityError : Swift.Hashable {}
extension identomat.ErrorType : Swift.Equatable {}
extension identomat.ErrorType : Swift.Hashable {}
extension identomat.AuthenticationError : Swift.Equatable {}
extension identomat.AuthenticationError : Swift.Hashable {}
extension identomat.TCPTransportError : Swift.Equatable {}
extension identomat.TCPTransportError : Swift.Hashable {}
extension identomat.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension identomat.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
extension identomat.SecurityErrorCode : Swift.Equatable {}
extension identomat.SecurityErrorCode : Swift.Hashable {}
extension identomat.SecurityErrorCode : Swift.RawRepresentable {}
extension identomat.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension identomat.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension identomat.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension identomat.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension identomat.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension identomat.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension identomat.URLEncoding.Destination : Swift.Equatable {}
extension identomat.URLEncoding.Destination : Swift.Hashable {}
extension identomat.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension identomat.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension identomat.URLEncoding.BoolEncoding : Swift.Equatable {}
extension identomat.URLEncoding.BoolEncoding : Swift.Hashable {}
extension identomat.CloseCode : Swift.Equatable {}
extension identomat.CloseCode : Swift.Hashable {}
extension identomat.CloseCode : Swift.RawRepresentable {}
extension identomat.FrameOpCode : Swift.Equatable {}
extension identomat.FrameOpCode : Swift.Hashable {}
extension identomat.FrameOpCode : Swift.RawRepresentable {}
extension identomat.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension identomat.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
